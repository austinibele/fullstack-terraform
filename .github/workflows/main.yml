name: deploy

on:
  push:
    branches:
      - master
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install & Build
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-frontend-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: web/node-app-frontend
            IMAGE_TAG: ${{ github.sha }}
        run: |
            cd frontend && docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "::set-output name=frontend-image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: web/node-app-backend
            IMAGE_TAG: ${{ github.sha }}
        run: |
            cd backend && docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "::set-output name=backend-image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new frontend image ID in the Amazon ECS task definition
        id: task-def-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
            task-definition: infra/task-definitions/service.latest.json
            container-name: frontend 
            image: ${{ steps.build-frontend-image.outputs.frontend-image }}

      - name: Fill in the new backend image ID in the Amazon ECS task definition
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
            task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
            container-name: backend 
            image: ${{ steps.build-backend-image.outputs.backend-image }}

      - name: Update App Spec File
        run: |
          sed -ie "s/<FRONTEND_CONTAINER_NAME>/frontend/" ./appspec.json
          sed -ie "s/<FRONTEND_CONTAINER_PORT>/3000/" ./appspec.json
          sed -ie "s/<BACKEND_CONTAINER_NAME>/backend/" ./appspec.json
          sed -ie "s/<BACKEND_CONTAINER_PORT>/5252/" ./appspec.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: web-service-node-app-prod
          cluster: web-cluster-node-app-prod
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: deployment-app-node-app-prod
          codedeploy-deployment-group: deployment-group-node-app-prod