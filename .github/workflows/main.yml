name: deploy

on:
  push:
    branches:
      - master
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install & Build
        uses: actions/checkout@v3

      ############
      ### AWS ####
      ############
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      ############
      # Terraform #
      ############
      - name: Retrieve DB_HOST from Terraform outputs
        id: terraform-output
        run: |
          cd infra
          terraform init

          echo "Retrieving DB_HOST..."
          DB_HOST=$(terraform output -raw db_host)
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV

          echo "Retrieving backend_alb_url..."
          BACKEND_URL=$(terraform output -raw backend_alb_url)
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV

          echo "Retrieving alb_url..."
          FRONTEND_URL=$(terraform output -raw alb_url)
          echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV

          echo "Retrieving db_name..."
          DB_NAME=$(terraform output -raw db_name)
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
        env:
          TF_WORKSPACE: fullstack-terraform-template

      ############
      # Frontend #
      ############
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: web/node-app/frontend
            IMAGE_TAG: ${{ github.sha }}
            BACKEND_URL: ${{ env.BACKEND_URL }}
        run: |
            cd frontend && docker build \
              --build-arg BACKEND_URL=${BACKEND_URL} \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "FRONTEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
            task-definition: infra/task-definitions/service.latest.json
            container-name: frontend 
            image: ${{ env.FRONTEND_IMAGE }}

      - name: Update App Spec File
        run: |
          sed -ie "s/<CONTAINER_NAME>/$CONTAINER_NAME/" ./appspec.json
          sed -ie "s/<CONTAINER_PORT>/$CONTAINER_PORT/" ./appspec.json
        env:
          CONTAINER_NAME: frontend 
          CONTAINER_PORT: 3000

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: web-service-node-app-prod
          cluster: web-cluster-node-app-prod
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: deployment-app-node-app-prod
          codedeploy-deployment-group: deployment-group-node-app-prod

      ####################
      # Retrieve Secrets #
      ####################
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Retrieve secrets from AWS Secrets Manager
        id: retrieve-secrets
        run: |
          SECRET_STRING=$(aws secretsmanager get-secret-value --secret-id Masteraccoundb --query SecretString --output text)
          DB_USERNAME=$(echo $SECRET_STRING | jq -r .username)
          DB_PASSWORD=$(echo $SECRET_STRING | jq -r .password)
          echo "DB_USERNAME=$DB_USERNAME" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
        env:
          AWS_REGION: us-east-1
        shell: bash

      ###########
      # Backend #
      ###########
      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: web/node-app/backend
            IMAGE_TAG: ${{ github.sha }}
            PORT: 5252
            DB_USER: postgres
            DB_HOST: ${{ env.DB_HOST }} 
            DB_NAME: ${{ env.DB_NAME }}
            DB_PASSWORD: ${{ env.DB_PASSWORD }}
            DB_PORT: 5432
            CORS_ORIGIN: ${{ env.FRONTEND_URL }}
        run: |
            cd backend && docker build \
              --build-arg PORT=${PORT} \
              --build-arg DB_USER=${DB_USER} \
              --build-arg DB_HOST=${DB_HOST} \
              --build-arg DB_NAME=${DB_NAME} \
              --build-arg DB_PASSWORD=${DB_PASSWORD} \
              --build-arg DB_PORT=${DB_PORT} \
              --build-arg CORS_ORIGIN=${CORS_ORIGIN} \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "BACKEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Fill in the new backend image ID in the Amazon ECS task definition
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
            task-definition: infra/task-definitions/backend-service.latest.json
            container-name: backend
            image: ${{ env.BACKEND_IMAGE }}

      # Add steps to update the appspec.json for the backend service
      - name: Update App Spec File for Backend
        run: |
          sed -ie "s/<BACKEND_CONTAINER_NAME>/backend/" ./appspec.json
          sed -ie "s/<BACKEND_CONTAINER_PORT>/5252/" ./appspec.json
        env:
          BACKEND_CONTAINER_NAME: backend
          BACKEND_CONTAINER_PORT: 5252

      # Add steps to deploy the backend ECS task definition
      - name: Deploy Backend Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: backend-service-${{ env.PROJECT_ID }}-${{ env.ENVIRONMENT }}
          cluster: backend-cluster-${{ env.PROJECT_ID }}-${{ env.ENVIRONMENT }}
          wait-for-service-stability: true
        env:
          PROJECT_ID: node-app
          ENVIRONMENT: prod

